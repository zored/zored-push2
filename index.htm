<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Debug</title>
    <style>
        html, body {
            background-color: #000;
        }
    </style>
</head>
<body>
<canvas width="960" height="160"></canvas>
<script>
  window.onload = () => {
    const canvas = document.getElementsByTagName('canvas')[0];
    const ctx = canvas.getContext('2d');
    setInterval(() => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      draw3DCube(ctx, canvas.width, canvas.height);
    }, 1000 / 60);
  }


  function rotateCubeAroundCenter(cube, angle) {
    const sin = Math.sin(angle);
    const cos = Math.cos(angle);
    // rotate around middle:
    const middle = cube.reduce(([x, y, z], [x2, y2, z2]) => {
      return [x + x2, y + y2, z + z2];
    }, [0, 0, 0]).map((v) => v / cube.length);
    return cube.map(([x, y, z]) => {
      return [
        (x - middle[0]) * cos - (y - middle[1]) * sin + middle[0],
        (x - middle[0]) * sin + (y - middle[1]) * cos + middle[1],
        z,
      ];
    });
  }

  function draw3DCube(ctx, canvasWidth, canvasHeight) {
    let cube = [
      [0, 0, 0],
      [0, 0, 1],
      [0, 1, 0],
      [0, 1, 1],
      [1, 0, 0],
      [1, 0, 1],
      [1, 1, 0],
      [1, 1, 1],
    ];
    cube = rotateCubeAroundCenter(cube, new Date().getTime()/1000);
    const cube2d = cube.map(([x, y, z]) => {
      return [
        (x - y) * Math.cos(Math.PI / 4),
        (x + y) * Math.sin(Math.PI / 4) - z,
      ];
    });
    const cube2dScaled = cube2d.map(([x, y]) => {
      return [
        x * 50 + canvasWidth / 2,
        y * 50 + canvasHeight / 2,
      ];
    });
    ctx.strokeStyle = '#fff';
    ctx.strokeWidth = 5;
    ctx.beginPath();
    ctx.moveTo(...cube2dScaled[0]);
    ctx.lineTo(...cube2dScaled[1]);
    ctx.lineTo(...cube2dScaled[3]);
    ctx.lineTo(...cube2dScaled[2]);
    ctx.lineTo(...cube2dScaled[0]);
    ctx.lineTo(...cube2dScaled[4]);
    ctx.lineTo(...cube2dScaled[5]);
    ctx.lineTo(...cube2dScaled[7]);
    ctx.lineTo(...cube2dScaled[6]);
    ctx.lineTo(...cube2dScaled[4]);
    ctx.moveTo(...cube2dScaled[1]);
    ctx.lineTo(...cube2dScaled[5]);
    ctx.moveTo(...cube2dScaled[3]);
    ctx.lineTo(...cube2dScaled[7]);
    ctx.moveTo(...cube2dScaled[2]);
    ctx.lineTo(...cube2dScaled[6]);
    ctx.stroke();
  }
</script>
</body>
</html>
